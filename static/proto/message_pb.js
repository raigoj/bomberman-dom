// source: message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.Message_proto.Bomb', null, global);
goog.exportSymbol('proto.Message_proto.Break', null, global);
goog.exportSymbol('proto.Message_proto.ClientGameMessage', null, global);
goog.exportSymbol('proto.Message_proto.ClientGameMessage.MessageCase', null, global);
goog.exportSymbol('proto.Message_proto.Direction', null, global);
goog.exportSymbol('proto.Message_proto.InitAll', null, global);
goog.exportSymbol('proto.Message_proto.InitPlayer', null, global);
goog.exportSymbol('proto.Message_proto.Map', null, global);
goog.exportSymbol('proto.Message_proto.MovePosition', null, global);
goog.exportSymbol('proto.Message_proto.Place', null, global);
goog.exportSymbol('proto.Message_proto.Player', null, global);
goog.exportSymbol('proto.Message_proto.RegisterClientID', null, global);
goog.exportSymbol('proto.Message_proto.RemovePlayer', null, global);
goog.exportSymbol('proto.Message_proto.ServerGameMessage', null, global);
goog.exportSymbol('proto.Message_proto.ServerGameMessage.MessageCase', null, global);
goog.exportSymbol('proto.Message_proto.SetPosition', null, global);
goog.exportSymbol('proto.Message_proto.UpdatePlayer', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message_proto.ClientGameMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Message_proto.ClientGameMessage.oneofGroups_);
};
goog.inherits(proto.Message_proto.ClientGameMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message_proto.ClientGameMessage.displayName = 'proto.Message_proto.ClientGameMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message_proto.SetPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Message_proto.SetPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message_proto.SetPosition.displayName = 'proto.Message_proto.SetPosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message_proto.MovePosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Message_proto.MovePosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message_proto.MovePosition.displayName = 'proto.Message_proto.MovePosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message_proto.InitPlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Message_proto.InitPlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message_proto.InitPlayer.displayName = 'proto.Message_proto.InitPlayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message_proto.Map = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Message_proto.Map.repeatedFields_, null);
};
goog.inherits(proto.Message_proto.Map, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message_proto.Map.displayName = 'proto.Message_proto.Map';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message_proto.Break = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Message_proto.Break, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message_proto.Break.displayName = 'proto.Message_proto.Break';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message_proto.InitAll = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Message_proto.InitAll.repeatedFields_, null);
};
goog.inherits(proto.Message_proto.InitAll, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message_proto.InitAll.displayName = 'proto.Message_proto.InitAll';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message_proto.RemovePlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Message_proto.RemovePlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message_proto.RemovePlayer.displayName = 'proto.Message_proto.RemovePlayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message_proto.RegisterClientID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Message_proto.RegisterClientID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message_proto.RegisterClientID.displayName = 'proto.Message_proto.RegisterClientID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message_proto.Place = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Message_proto.Place, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message_proto.Place.displayName = 'proto.Message_proto.Place';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message_proto.UpdatePlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Message_proto.UpdatePlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message_proto.UpdatePlayer.displayName = 'proto.Message_proto.UpdatePlayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message_proto.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Message_proto.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message_proto.Player.displayName = 'proto.Message_proto.Player';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message_proto.ServerGameMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Message_proto.ServerGameMessage.oneofGroups_);
};
goog.inherits(proto.Message_proto.ServerGameMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message_proto.ServerGameMessage.displayName = 'proto.Message_proto.ServerGameMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message_proto.Bomb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Message_proto.Bomb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message_proto.Bomb.displayName = 'proto.Message_proto.Bomb';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Message_proto.ClientGameMessage.oneofGroups_ = [[3,4,5,7,8]];

/**
 * @enum {number}
 */
proto.Message_proto.ClientGameMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  INIT_PLAYER_PAYLOAD: 3,
  MOVE_POSITION_PAYLOAD: 4,
  PLACE_PAYLOAD: 5,
  UPDATE_PLAYER_PAYLOAD: 7,
  SET_POSITION_PAYLOAD: 8
};

/**
 * @return {proto.Message_proto.ClientGameMessage.MessageCase}
 */
proto.Message_proto.ClientGameMessage.prototype.getMessageCase = function() {
  return /** @type {proto.Message_proto.ClientGameMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.Message_proto.ClientGameMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message_proto.ClientGameMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Message_proto.ClientGameMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message_proto.ClientGameMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.ClientGameMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputSequenceNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timeElapsed: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    initPlayerPayload: (f = msg.getInitPlayerPayload()) && proto.Message_proto.InitPlayer.toObject(includeInstance, f),
    movePositionPayload: (f = msg.getMovePositionPayload()) && proto.Message_proto.MovePosition.toObject(includeInstance, f),
    placePayload: (f = msg.getPlacePayload()) && proto.Message_proto.Place.toObject(includeInstance, f),
    updatePlayerPayload: (f = msg.getUpdatePlayerPayload()) && proto.Message_proto.UpdatePlayer.toObject(includeInstance, f),
    setPositionPayload: (f = msg.getSetPositionPayload()) && proto.Message_proto.SetPosition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message_proto.ClientGameMessage}
 */
proto.Message_proto.ClientGameMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message_proto.ClientGameMessage;
  return proto.Message_proto.ClientGameMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message_proto.ClientGameMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message_proto.ClientGameMessage}
 */
proto.Message_proto.ClientGameMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInputSequenceNumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTimeElapsed(value);
      break;
    case 3:
      var value = new proto.Message_proto.InitPlayer;
      reader.readMessage(value,proto.Message_proto.InitPlayer.deserializeBinaryFromReader);
      msg.setInitPlayerPayload(value);
      break;
    case 4:
      var value = new proto.Message_proto.MovePosition;
      reader.readMessage(value,proto.Message_proto.MovePosition.deserializeBinaryFromReader);
      msg.setMovePositionPayload(value);
      break;
    case 5:
      var value = new proto.Message_proto.Place;
      reader.readMessage(value,proto.Message_proto.Place.deserializeBinaryFromReader);
      msg.setPlacePayload(value);
      break;
    case 7:
      var value = new proto.Message_proto.UpdatePlayer;
      reader.readMessage(value,proto.Message_proto.UpdatePlayer.deserializeBinaryFromReader);
      msg.setUpdatePlayerPayload(value);
      break;
    case 8:
      var value = new proto.Message_proto.SetPosition;
      reader.readMessage(value,proto.Message_proto.SetPosition.deserializeBinaryFromReader);
      msg.setSetPositionPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message_proto.ClientGameMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message_proto.ClientGameMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message_proto.ClientGameMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.ClientGameMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTimeElapsed();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getInitPlayerPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Message_proto.InitPlayer.serializeBinaryToWriter
    );
  }
  f = message.getMovePositionPayload();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Message_proto.MovePosition.serializeBinaryToWriter
    );
  }
  f = message.getPlacePayload();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Message_proto.Place.serializeBinaryToWriter
    );
  }
  f = message.getUpdatePlayerPayload();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Message_proto.UpdatePlayer.serializeBinaryToWriter
    );
  }
  f = message.getSetPositionPayload();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Message_proto.SetPosition.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 input_sequence_number = 1;
 * @return {number}
 */
proto.Message_proto.ClientGameMessage.prototype.getInputSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.ClientGameMessage} returns this
 */
proto.Message_proto.ClientGameMessage.prototype.setInputSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float time_elapsed = 2;
 * @return {number}
 */
proto.Message_proto.ClientGameMessage.prototype.getTimeElapsed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.ClientGameMessage} returns this
 */
proto.Message_proto.ClientGameMessage.prototype.setTimeElapsed = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional InitPlayer init_player_payload = 3;
 * @return {?proto.Message_proto.InitPlayer}
 */
proto.Message_proto.ClientGameMessage.prototype.getInitPlayerPayload = function() {
  return /** @type{?proto.Message_proto.InitPlayer} */ (
    jspb.Message.getWrapperField(this, proto.Message_proto.InitPlayer, 3));
};


/**
 * @param {?proto.Message_proto.InitPlayer|undefined} value
 * @return {!proto.Message_proto.ClientGameMessage} returns this
*/
proto.Message_proto.ClientGameMessage.prototype.setInitPlayerPayload = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.Message_proto.ClientGameMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message_proto.ClientGameMessage} returns this
 */
proto.Message_proto.ClientGameMessage.prototype.clearInitPlayerPayload = function() {
  return this.setInitPlayerPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message_proto.ClientGameMessage.prototype.hasInitPlayerPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MovePosition move_position_payload = 4;
 * @return {?proto.Message_proto.MovePosition}
 */
proto.Message_proto.ClientGameMessage.prototype.getMovePositionPayload = function() {
  return /** @type{?proto.Message_proto.MovePosition} */ (
    jspb.Message.getWrapperField(this, proto.Message_proto.MovePosition, 4));
};


/**
 * @param {?proto.Message_proto.MovePosition|undefined} value
 * @return {!proto.Message_proto.ClientGameMessage} returns this
*/
proto.Message_proto.ClientGameMessage.prototype.setMovePositionPayload = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.Message_proto.ClientGameMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message_proto.ClientGameMessage} returns this
 */
proto.Message_proto.ClientGameMessage.prototype.clearMovePositionPayload = function() {
  return this.setMovePositionPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message_proto.ClientGameMessage.prototype.hasMovePositionPayload = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Place place_payload = 5;
 * @return {?proto.Message_proto.Place}
 */
proto.Message_proto.ClientGameMessage.prototype.getPlacePayload = function() {
  return /** @type{?proto.Message_proto.Place} */ (
    jspb.Message.getWrapperField(this, proto.Message_proto.Place, 5));
};


/**
 * @param {?proto.Message_proto.Place|undefined} value
 * @return {!proto.Message_proto.ClientGameMessage} returns this
*/
proto.Message_proto.ClientGameMessage.prototype.setPlacePayload = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.Message_proto.ClientGameMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message_proto.ClientGameMessage} returns this
 */
proto.Message_proto.ClientGameMessage.prototype.clearPlacePayload = function() {
  return this.setPlacePayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message_proto.ClientGameMessage.prototype.hasPlacePayload = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional UpdatePlayer update_player_payload = 7;
 * @return {?proto.Message_proto.UpdatePlayer}
 */
proto.Message_proto.ClientGameMessage.prototype.getUpdatePlayerPayload = function() {
  return /** @type{?proto.Message_proto.UpdatePlayer} */ (
    jspb.Message.getWrapperField(this, proto.Message_proto.UpdatePlayer, 7));
};


/**
 * @param {?proto.Message_proto.UpdatePlayer|undefined} value
 * @return {!proto.Message_proto.ClientGameMessage} returns this
*/
proto.Message_proto.ClientGameMessage.prototype.setUpdatePlayerPayload = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.Message_proto.ClientGameMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message_proto.ClientGameMessage} returns this
 */
proto.Message_proto.ClientGameMessage.prototype.clearUpdatePlayerPayload = function() {
  return this.setUpdatePlayerPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message_proto.ClientGameMessage.prototype.hasUpdatePlayerPayload = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SetPosition set_position_payload = 8;
 * @return {?proto.Message_proto.SetPosition}
 */
proto.Message_proto.ClientGameMessage.prototype.getSetPositionPayload = function() {
  return /** @type{?proto.Message_proto.SetPosition} */ (
    jspb.Message.getWrapperField(this, proto.Message_proto.SetPosition, 8));
};


/**
 * @param {?proto.Message_proto.SetPosition|undefined} value
 * @return {!proto.Message_proto.ClientGameMessage} returns this
*/
proto.Message_proto.ClientGameMessage.prototype.setSetPositionPayload = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.Message_proto.ClientGameMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message_proto.ClientGameMessage} returns this
 */
proto.Message_proto.ClientGameMessage.prototype.clearSetPositionPayload = function() {
  return this.setSetPositionPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message_proto.ClientGameMessage.prototype.hasSetPositionPayload = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message_proto.SetPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.Message_proto.SetPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message_proto.SetPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.SetPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message_proto.SetPosition}
 */
proto.Message_proto.SetPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message_proto.SetPosition;
  return proto.Message_proto.SetPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message_proto.SetPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message_proto.SetPosition}
 */
proto.Message_proto.SetPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message_proto.SetPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message_proto.SetPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message_proto.SetPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.SetPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Message_proto.SetPosition.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.SetPosition} returns this
 */
proto.Message_proto.SetPosition.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float x = 2;
 * @return {number}
 */
proto.Message_proto.SetPosition.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.SetPosition} returns this
 */
proto.Message_proto.SetPosition.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float y = 3;
 * @return {number}
 */
proto.Message_proto.SetPosition.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.SetPosition} returns this
 */
proto.Message_proto.SetPosition.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message_proto.MovePosition.prototype.toObject = function(opt_includeInstance) {
  return proto.Message_proto.MovePosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message_proto.MovePosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.MovePosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dx: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    dy: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message_proto.MovePosition}
 */
proto.Message_proto.MovePosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message_proto.MovePosition;
  return proto.Message_proto.MovePosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message_proto.MovePosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message_proto.MovePosition}
 */
proto.Message_proto.MovePosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message_proto.MovePosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message_proto.MovePosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message_proto.MovePosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.MovePosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDx();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getDy();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Message_proto.MovePosition.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.MovePosition} returns this
 */
proto.Message_proto.MovePosition.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float dx = 2;
 * @return {number}
 */
proto.Message_proto.MovePosition.prototype.getDx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.MovePosition} returns this
 */
proto.Message_proto.MovePosition.prototype.setDx = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float dy = 3;
 * @return {number}
 */
proto.Message_proto.MovePosition.prototype.getDy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.MovePosition} returns this
 */
proto.Message_proto.MovePosition.prototype.setDy = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message_proto.InitPlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.Message_proto.InitPlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message_proto.InitPlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.InitPlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    lives: jspb.Message.getFieldWithDefault(msg, 6, 0),
    isMain: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message_proto.InitPlayer}
 */
proto.Message_proto.InitPlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message_proto.InitPlayer;
  return proto.Message_proto.InitPlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message_proto.InitPlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message_proto.InitPlayer}
 */
proto.Message_proto.InitPlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClientId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLives(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message_proto.InitPlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message_proto.InitPlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message_proto.InitPlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.InitPlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getClientId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLives();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getIsMain();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Message_proto.InitPlayer.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.InitPlayer} returns this
 */
proto.Message_proto.InitPlayer.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 client_id = 2;
 * @return {number}
 */
proto.Message_proto.InitPlayer.prototype.getClientId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.InitPlayer} returns this
 */
proto.Message_proto.InitPlayer.prototype.setClientId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float x = 3;
 * @return {number}
 */
proto.Message_proto.InitPlayer.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.InitPlayer} returns this
 */
proto.Message_proto.InitPlayer.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float y = 4;
 * @return {number}
 */
proto.Message_proto.InitPlayer.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.InitPlayer} returns this
 */
proto.Message_proto.InitPlayer.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.Message_proto.InitPlayer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Message_proto.InitPlayer} returns this
 */
proto.Message_proto.InitPlayer.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 lives = 6;
 * @return {number}
 */
proto.Message_proto.InitPlayer.prototype.getLives = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.InitPlayer} returns this
 */
proto.Message_proto.InitPlayer.prototype.setLives = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool is_main = 7;
 * @return {boolean}
 */
proto.Message_proto.InitPlayer.prototype.getIsMain = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Message_proto.InitPlayer} returns this
 */
proto.Message_proto.InitPlayer.prototype.setIsMain = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Message_proto.Map.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message_proto.Map.prototype.toObject = function(opt_includeInstance) {
  return proto.Message_proto.Map.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message_proto.Map} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.Map.toObject = function(includeInstance, msg) {
  var f, obj = {
    wallList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    breakableList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    numCols: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numRows: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message_proto.Map}
 */
proto.Message_proto.Map.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message_proto.Map;
  return proto.Message_proto.Map.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message_proto.Map} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message_proto.Map}
 */
proto.Message_proto.Map.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addWall(values[i]);
      }
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBreakable(values[i]);
      }
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumCols(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumRows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message_proto.Map.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message_proto.Map.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message_proto.Map} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.Map.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWallList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getBreakableList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getNumCols();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getNumRows();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * repeated int32 wall = 1;
 * @return {!Array<number>}
 */
proto.Message_proto.Map.prototype.getWallList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Message_proto.Map} returns this
 */
proto.Message_proto.Map.prototype.setWallList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Message_proto.Map} returns this
 */
proto.Message_proto.Map.prototype.addWall = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Message_proto.Map} returns this
 */
proto.Message_proto.Map.prototype.clearWallList = function() {
  return this.setWallList([]);
};


/**
 * repeated int32 breakable = 2;
 * @return {!Array<number>}
 */
proto.Message_proto.Map.prototype.getBreakableList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Message_proto.Map} returns this
 */
proto.Message_proto.Map.prototype.setBreakableList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Message_proto.Map} returns this
 */
proto.Message_proto.Map.prototype.addBreakable = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Message_proto.Map} returns this
 */
proto.Message_proto.Map.prototype.clearBreakableList = function() {
  return this.setBreakableList([]);
};


/**
 * optional int32 num_cols = 3;
 * @return {number}
 */
proto.Message_proto.Map.prototype.getNumCols = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.Map} returns this
 */
proto.Message_proto.Map.prototype.setNumCols = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 num_rows = 4;
 * @return {number}
 */
proto.Message_proto.Map.prototype.getNumRows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.Map} returns this
 */
proto.Message_proto.Map.prototype.setNumRows = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message_proto.Break.prototype.toObject = function(opt_includeInstance) {
  return proto.Message_proto.Break.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message_proto.Break} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.Break.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message_proto.Break}
 */
proto.Message_proto.Break.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message_proto.Break;
  return proto.Message_proto.Break.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message_proto.Break} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message_proto.Break}
 */
proto.Message_proto.Break.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message_proto.Break.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message_proto.Break.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message_proto.Break} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.Break.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Message_proto.Break.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.Break} returns this
 */
proto.Message_proto.Break.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Message_proto.InitAll.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message_proto.InitAll.prototype.toObject = function(opt_includeInstance) {
  return proto.Message_proto.InitAll.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message_proto.InitAll} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.InitAll.toObject = function(includeInstance, msg) {
  var f, obj = {
    initPlayerList: jspb.Message.toObjectList(msg.getInitPlayerList(),
    proto.Message_proto.InitPlayer.toObject, includeInstance),
    initMap: (f = msg.getInitMap()) && proto.Message_proto.Map.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message_proto.InitAll}
 */
proto.Message_proto.InitAll.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message_proto.InitAll;
  return proto.Message_proto.InitAll.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message_proto.InitAll} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message_proto.InitAll}
 */
proto.Message_proto.InitAll.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Message_proto.InitPlayer;
      reader.readMessage(value,proto.Message_proto.InitPlayer.deserializeBinaryFromReader);
      msg.addInitPlayer(value);
      break;
    case 2:
      var value = new proto.Message_proto.Map;
      reader.readMessage(value,proto.Message_proto.Map.deserializeBinaryFromReader);
      msg.setInitMap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message_proto.InitAll.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message_proto.InitAll.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message_proto.InitAll} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.InitAll.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitPlayerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Message_proto.InitPlayer.serializeBinaryToWriter
    );
  }
  f = message.getInitMap();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Message_proto.Map.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InitPlayer init_player = 1;
 * @return {!Array<!proto.Message_proto.InitPlayer>}
 */
proto.Message_proto.InitAll.prototype.getInitPlayerList = function() {
  return /** @type{!Array<!proto.Message_proto.InitPlayer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Message_proto.InitPlayer, 1));
};


/**
 * @param {!Array<!proto.Message_proto.InitPlayer>} value
 * @return {!proto.Message_proto.InitAll} returns this
*/
proto.Message_proto.InitAll.prototype.setInitPlayerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Message_proto.InitPlayer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Message_proto.InitPlayer}
 */
proto.Message_proto.InitAll.prototype.addInitPlayer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Message_proto.InitPlayer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Message_proto.InitAll} returns this
 */
proto.Message_proto.InitAll.prototype.clearInitPlayerList = function() {
  return this.setInitPlayerList([]);
};


/**
 * optional Map init_map = 2;
 * @return {?proto.Message_proto.Map}
 */
proto.Message_proto.InitAll.prototype.getInitMap = function() {
  return /** @type{?proto.Message_proto.Map} */ (
    jspb.Message.getWrapperField(this, proto.Message_proto.Map, 2));
};


/**
 * @param {?proto.Message_proto.Map|undefined} value
 * @return {!proto.Message_proto.InitAll} returns this
*/
proto.Message_proto.InitAll.prototype.setInitMap = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message_proto.InitAll} returns this
 */
proto.Message_proto.InitAll.prototype.clearInitMap = function() {
  return this.setInitMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message_proto.InitAll.prototype.hasInitMap = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message_proto.RemovePlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.Message_proto.RemovePlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message_proto.RemovePlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.RemovePlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message_proto.RemovePlayer}
 */
proto.Message_proto.RemovePlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message_proto.RemovePlayer;
  return proto.Message_proto.RemovePlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message_proto.RemovePlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message_proto.RemovePlayer}
 */
proto.Message_proto.RemovePlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message_proto.RemovePlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message_proto.RemovePlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message_proto.RemovePlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.RemovePlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Message_proto.RemovePlayer.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.RemovePlayer} returns this
 */
proto.Message_proto.RemovePlayer.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message_proto.RegisterClientID.prototype.toObject = function(opt_includeInstance) {
  return proto.Message_proto.RegisterClientID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message_proto.RegisterClientID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.RegisterClientID.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message_proto.RegisterClientID}
 */
proto.Message_proto.RegisterClientID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message_proto.RegisterClientID;
  return proto.Message_proto.RegisterClientID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message_proto.RegisterClientID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message_proto.RegisterClientID}
 */
proto.Message_proto.RegisterClientID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClientId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message_proto.RegisterClientID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message_proto.RegisterClientID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message_proto.RegisterClientID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.RegisterClientID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 client_id = 1;
 * @return {number}
 */
proto.Message_proto.RegisterClientID.prototype.getClientId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.RegisterClientID} returns this
 */
proto.Message_proto.RegisterClientID.prototype.setClientId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message_proto.Place.prototype.toObject = function(opt_includeInstance) {
  return proto.Message_proto.Place.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message_proto.Place} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.Place.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    playerId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    placed: (f = msg.getPlaced()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message_proto.Place}
 */
proto.Message_proto.Place.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message_proto.Place;
  return proto.Message_proto.Place.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message_proto.Place} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message_proto.Place}
 */
proto.Message_proto.Place.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setPlaced(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message_proto.Place.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message_proto.Place.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message_proto.Place} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.Place.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getPlaced();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.Message_proto.Place.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.Place} returns this
 */
proto.Message_proto.Place.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 player_id = 2;
 * @return {number}
 */
proto.Message_proto.Place.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.Place} returns this
 */
proto.Message_proto.Place.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float x = 3;
 * @return {number}
 */
proto.Message_proto.Place.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.Place} returns this
 */
proto.Message_proto.Place.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float y = 4;
 * @return {number}
 */
proto.Message_proto.Place.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.Place} returns this
 */
proto.Message_proto.Place.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp placed = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.Message_proto.Place.prototype.getPlaced = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.Message_proto.Place} returns this
*/
proto.Message_proto.Place.prototype.setPlaced = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message_proto.Place} returns this
 */
proto.Message_proto.Place.prototype.clearPlaced = function() {
  return this.setPlaced(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message_proto.Place.prototype.hasPlaced = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message_proto.UpdatePlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.Message_proto.UpdatePlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message_proto.UpdatePlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.UpdatePlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    health: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    isDestroy: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message_proto.UpdatePlayer}
 */
proto.Message_proto.UpdatePlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message_proto.UpdatePlayer;
  return proto.Message_proto.UpdatePlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message_proto.UpdatePlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message_proto.UpdatePlayer}
 */
proto.Message_proto.UpdatePlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHealth(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDestroy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message_proto.UpdatePlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message_proto.UpdatePlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message_proto.UpdatePlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.UpdatePlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getHealth();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIsDestroy();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Message_proto.UpdatePlayer.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.UpdatePlayer} returns this
 */
proto.Message_proto.UpdatePlayer.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float x = 2;
 * @return {number}
 */
proto.Message_proto.UpdatePlayer.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.UpdatePlayer} returns this
 */
proto.Message_proto.UpdatePlayer.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float y = 3;
 * @return {number}
 */
proto.Message_proto.UpdatePlayer.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.UpdatePlayer} returns this
 */
proto.Message_proto.UpdatePlayer.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float health = 4;
 * @return {number}
 */
proto.Message_proto.UpdatePlayer.prototype.getHealth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.UpdatePlayer} returns this
 */
proto.Message_proto.UpdatePlayer.prototype.setHealth = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.Message_proto.UpdatePlayer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Message_proto.UpdatePlayer} returns this
 */
proto.Message_proto.UpdatePlayer.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool is_destroy = 6;
 * @return {boolean}
 */
proto.Message_proto.UpdatePlayer.prototype.getIsDestroy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Message_proto.UpdatePlayer} returns this
 */
proto.Message_proto.UpdatePlayer.prototype.setIsDestroy = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message_proto.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.Message_proto.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message_proto.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    lives: jspb.Message.getFieldWithDefault(msg, 4, 0),
    bombs: jspb.Message.getFieldWithDefault(msg, 5, 0),
    speed: jspb.Message.getFieldWithDefault(msg, 6, 0),
    blast: jspb.Message.getFieldWithDefault(msg, 7, 0),
    placed: jspb.Message.getFieldWithDefault(msg, 8, 0),
    name: jspb.Message.getFieldWithDefault(msg, 9, ""),
    isDestroy: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    currentInputNumber: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message_proto.Player}
 */
proto.Message_proto.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message_proto.Player;
  return proto.Message_proto.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message_proto.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message_proto.Player}
 */
proto.Message_proto.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLives(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBombs(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpeed(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlast(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlaced(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDestroy(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentInputNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message_proto.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message_proto.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message_proto.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getLives();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getBombs();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getBlast();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getPlaced();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getIsDestroy();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getCurrentInputNumber();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Message_proto.Player.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.Player} returns this
 */
proto.Message_proto.Player.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float x = 2;
 * @return {number}
 */
proto.Message_proto.Player.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.Player} returns this
 */
proto.Message_proto.Player.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float y = 3;
 * @return {number}
 */
proto.Message_proto.Player.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.Player} returns this
 */
proto.Message_proto.Player.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional int32 lives = 4;
 * @return {number}
 */
proto.Message_proto.Player.prototype.getLives = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.Player} returns this
 */
proto.Message_proto.Player.prototype.setLives = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 bombs = 5;
 * @return {number}
 */
proto.Message_proto.Player.prototype.getBombs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.Player} returns this
 */
proto.Message_proto.Player.prototype.setBombs = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 speed = 6;
 * @return {number}
 */
proto.Message_proto.Player.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.Player} returns this
 */
proto.Message_proto.Player.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 blast = 7;
 * @return {number}
 */
proto.Message_proto.Player.prototype.getBlast = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.Player} returns this
 */
proto.Message_proto.Player.prototype.setBlast = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 placed = 8;
 * @return {number}
 */
proto.Message_proto.Player.prototype.getPlaced = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.Player} returns this
 */
proto.Message_proto.Player.prototype.setPlaced = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string name = 9;
 * @return {string}
 */
proto.Message_proto.Player.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.Message_proto.Player} returns this
 */
proto.Message_proto.Player.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool is_destroy = 11;
 * @return {boolean}
 */
proto.Message_proto.Player.prototype.getIsDestroy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Message_proto.Player} returns this
 */
proto.Message_proto.Player.prototype.setIsDestroy = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional int32 current_input_number = 12;
 * @return {number}
 */
proto.Message_proto.Player.prototype.getCurrentInputNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.Player} returns this
 */
proto.Message_proto.Player.prototype.setCurrentInputNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Message_proto.ServerGameMessage.oneofGroups_ = [[2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.Message_proto.ServerGameMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  INIT_ALL_PAYLOAD: 2,
  INIT_PLAYER_PAYLOAD: 3,
  UPDATE_PLAYER_PAYLOAD: 4,
  INIT_PLACE_PAYLOAD: 5,
  REMOVE_PLAYER_PAYLOAD: 6,
  REGISTER_CLIENT_ID_PAYLOAD: 7
};

/**
 * @return {proto.Message_proto.ServerGameMessage.MessageCase}
 */
proto.Message_proto.ServerGameMessage.prototype.getMessageCase = function() {
  return /** @type {proto.Message_proto.ServerGameMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.Message_proto.ServerGameMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message_proto.ServerGameMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Message_proto.ServerGameMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message_proto.ServerGameMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.ServerGameMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastProcessInput: jspb.Message.getFieldWithDefault(msg, 1, 0),
    initAllPayload: (f = msg.getInitAllPayload()) && proto.Message_proto.InitAll.toObject(includeInstance, f),
    initPlayerPayload: (f = msg.getInitPlayerPayload()) && proto.Message_proto.InitPlayer.toObject(includeInstance, f),
    updatePlayerPayload: (f = msg.getUpdatePlayerPayload()) && proto.Message_proto.Player.toObject(includeInstance, f),
    initPlacePayload: (f = msg.getInitPlacePayload()) && proto.Message_proto.Place.toObject(includeInstance, f),
    removePlayerPayload: (f = msg.getRemovePlayerPayload()) && proto.Message_proto.RemovePlayer.toObject(includeInstance, f),
    registerClientIdPayload: (f = msg.getRegisterClientIdPayload()) && proto.Message_proto.RegisterClientID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message_proto.ServerGameMessage}
 */
proto.Message_proto.ServerGameMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message_proto.ServerGameMessage;
  return proto.Message_proto.ServerGameMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message_proto.ServerGameMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message_proto.ServerGameMessage}
 */
proto.Message_proto.ServerGameMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLastProcessInput(value);
      break;
    case 2:
      var value = new proto.Message_proto.InitAll;
      reader.readMessage(value,proto.Message_proto.InitAll.deserializeBinaryFromReader);
      msg.setInitAllPayload(value);
      break;
    case 3:
      var value = new proto.Message_proto.InitPlayer;
      reader.readMessage(value,proto.Message_proto.InitPlayer.deserializeBinaryFromReader);
      msg.setInitPlayerPayload(value);
      break;
    case 4:
      var value = new proto.Message_proto.Player;
      reader.readMessage(value,proto.Message_proto.Player.deserializeBinaryFromReader);
      msg.setUpdatePlayerPayload(value);
      break;
    case 5:
      var value = new proto.Message_proto.Place;
      reader.readMessage(value,proto.Message_proto.Place.deserializeBinaryFromReader);
      msg.setInitPlacePayload(value);
      break;
    case 6:
      var value = new proto.Message_proto.RemovePlayer;
      reader.readMessage(value,proto.Message_proto.RemovePlayer.deserializeBinaryFromReader);
      msg.setRemovePlayerPayload(value);
      break;
    case 7:
      var value = new proto.Message_proto.RegisterClientID;
      reader.readMessage(value,proto.Message_proto.RegisterClientID.deserializeBinaryFromReader);
      msg.setRegisterClientIdPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message_proto.ServerGameMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message_proto.ServerGameMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message_proto.ServerGameMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.ServerGameMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastProcessInput();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInitAllPayload();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Message_proto.InitAll.serializeBinaryToWriter
    );
  }
  f = message.getInitPlayerPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Message_proto.InitPlayer.serializeBinaryToWriter
    );
  }
  f = message.getUpdatePlayerPayload();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Message_proto.Player.serializeBinaryToWriter
    );
  }
  f = message.getInitPlacePayload();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Message_proto.Place.serializeBinaryToWriter
    );
  }
  f = message.getRemovePlayerPayload();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Message_proto.RemovePlayer.serializeBinaryToWriter
    );
  }
  f = message.getRegisterClientIdPayload();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Message_proto.RegisterClientID.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 last_process_input = 1;
 * @return {number}
 */
proto.Message_proto.ServerGameMessage.prototype.getLastProcessInput = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.ServerGameMessage} returns this
 */
proto.Message_proto.ServerGameMessage.prototype.setLastProcessInput = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional InitAll init_all_payload = 2;
 * @return {?proto.Message_proto.InitAll}
 */
proto.Message_proto.ServerGameMessage.prototype.getInitAllPayload = function() {
  return /** @type{?proto.Message_proto.InitAll} */ (
    jspb.Message.getWrapperField(this, proto.Message_proto.InitAll, 2));
};


/**
 * @param {?proto.Message_proto.InitAll|undefined} value
 * @return {!proto.Message_proto.ServerGameMessage} returns this
*/
proto.Message_proto.ServerGameMessage.prototype.setInitAllPayload = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.Message_proto.ServerGameMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message_proto.ServerGameMessage} returns this
 */
proto.Message_proto.ServerGameMessage.prototype.clearInitAllPayload = function() {
  return this.setInitAllPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message_proto.ServerGameMessage.prototype.hasInitAllPayload = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional InitPlayer init_player_payload = 3;
 * @return {?proto.Message_proto.InitPlayer}
 */
proto.Message_proto.ServerGameMessage.prototype.getInitPlayerPayload = function() {
  return /** @type{?proto.Message_proto.InitPlayer} */ (
    jspb.Message.getWrapperField(this, proto.Message_proto.InitPlayer, 3));
};


/**
 * @param {?proto.Message_proto.InitPlayer|undefined} value
 * @return {!proto.Message_proto.ServerGameMessage} returns this
*/
proto.Message_proto.ServerGameMessage.prototype.setInitPlayerPayload = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.Message_proto.ServerGameMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message_proto.ServerGameMessage} returns this
 */
proto.Message_proto.ServerGameMessage.prototype.clearInitPlayerPayload = function() {
  return this.setInitPlayerPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message_proto.ServerGameMessage.prototype.hasInitPlayerPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Player update_player_payload = 4;
 * @return {?proto.Message_proto.Player}
 */
proto.Message_proto.ServerGameMessage.prototype.getUpdatePlayerPayload = function() {
  return /** @type{?proto.Message_proto.Player} */ (
    jspb.Message.getWrapperField(this, proto.Message_proto.Player, 4));
};


/**
 * @param {?proto.Message_proto.Player|undefined} value
 * @return {!proto.Message_proto.ServerGameMessage} returns this
*/
proto.Message_proto.ServerGameMessage.prototype.setUpdatePlayerPayload = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.Message_proto.ServerGameMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message_proto.ServerGameMessage} returns this
 */
proto.Message_proto.ServerGameMessage.prototype.clearUpdatePlayerPayload = function() {
  return this.setUpdatePlayerPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message_proto.ServerGameMessage.prototype.hasUpdatePlayerPayload = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Place init_place_payload = 5;
 * @return {?proto.Message_proto.Place}
 */
proto.Message_proto.ServerGameMessage.prototype.getInitPlacePayload = function() {
  return /** @type{?proto.Message_proto.Place} */ (
    jspb.Message.getWrapperField(this, proto.Message_proto.Place, 5));
};


/**
 * @param {?proto.Message_proto.Place|undefined} value
 * @return {!proto.Message_proto.ServerGameMessage} returns this
*/
proto.Message_proto.ServerGameMessage.prototype.setInitPlacePayload = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.Message_proto.ServerGameMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message_proto.ServerGameMessage} returns this
 */
proto.Message_proto.ServerGameMessage.prototype.clearInitPlacePayload = function() {
  return this.setInitPlacePayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message_proto.ServerGameMessage.prototype.hasInitPlacePayload = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RemovePlayer remove_player_payload = 6;
 * @return {?proto.Message_proto.RemovePlayer}
 */
proto.Message_proto.ServerGameMessage.prototype.getRemovePlayerPayload = function() {
  return /** @type{?proto.Message_proto.RemovePlayer} */ (
    jspb.Message.getWrapperField(this, proto.Message_proto.RemovePlayer, 6));
};


/**
 * @param {?proto.Message_proto.RemovePlayer|undefined} value
 * @return {!proto.Message_proto.ServerGameMessage} returns this
*/
proto.Message_proto.ServerGameMessage.prototype.setRemovePlayerPayload = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.Message_proto.ServerGameMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message_proto.ServerGameMessage} returns this
 */
proto.Message_proto.ServerGameMessage.prototype.clearRemovePlayerPayload = function() {
  return this.setRemovePlayerPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message_proto.ServerGameMessage.prototype.hasRemovePlayerPayload = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RegisterClientID register_client_id_payload = 7;
 * @return {?proto.Message_proto.RegisterClientID}
 */
proto.Message_proto.ServerGameMessage.prototype.getRegisterClientIdPayload = function() {
  return /** @type{?proto.Message_proto.RegisterClientID} */ (
    jspb.Message.getWrapperField(this, proto.Message_proto.RegisterClientID, 7));
};


/**
 * @param {?proto.Message_proto.RegisterClientID|undefined} value
 * @return {!proto.Message_proto.ServerGameMessage} returns this
*/
proto.Message_proto.ServerGameMessage.prototype.setRegisterClientIdPayload = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.Message_proto.ServerGameMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message_proto.ServerGameMessage} returns this
 */
proto.Message_proto.ServerGameMessage.prototype.clearRegisterClientIdPayload = function() {
  return this.setRegisterClientIdPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message_proto.ServerGameMessage.prototype.hasRegisterClientIdPayload = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message_proto.Bomb.prototype.toObject = function(opt_includeInstance) {
  return proto.Message_proto.Bomb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message_proto.Bomb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.Bomb.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    x: jspb.Message.getFieldWithDefault(msg, 2, 0),
    y: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nextReload: (f = msg.getNextReload()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message_proto.Bomb}
 */
proto.Message_proto.Bomb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message_proto.Bomb;
  return proto.Message_proto.Bomb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message_proto.Bomb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message_proto.Bomb}
 */
proto.Message_proto.Bomb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setNextReload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message_proto.Bomb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message_proto.Bomb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message_proto.Bomb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message_proto.Bomb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getNextReload();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.Message_proto.Bomb.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.Bomb} returns this
 */
proto.Message_proto.Bomb.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 x = 2;
 * @return {number}
 */
proto.Message_proto.Bomb.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.Bomb} returns this
 */
proto.Message_proto.Bomb.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 y = 3;
 * @return {number}
 */
proto.Message_proto.Bomb.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message_proto.Bomb} returns this
 */
proto.Message_proto.Bomb.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp next_reload = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.Message_proto.Bomb.prototype.getNextReload = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.Message_proto.Bomb} returns this
*/
proto.Message_proto.Bomb.prototype.setNextReload = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message_proto.Bomb} returns this
 */
proto.Message_proto.Bomb.prototype.clearNextReload = function() {
  return this.setNextReload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message_proto.Bomb.prototype.hasNextReload = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.Message_proto.Direction = {
  UP: 0,
  DOWN: 1,
  LEFT: 2,
  RIGHT: 3
};

goog.object.extend(exports, proto.Message_proto);
